# @format

fragment UserCommonParts on User {
  id
  firstname
  surname
  email
  isActive
  avatar
  dob
  username
  address
  firebaseUid
  city
  state
  updatedAt
  createdAt
  country {
    name
    id
    flag
    abbreviation
  }
  accountTypeId
  _count {
    following
    followedBy
    posts
    comments
    postLikes
    commentLikes
    postReports
    interestedSchools
    recruitedSchools
    prospectedSchools
    evaluationsCreated
    postFlag
    blockedByUsers
    blockedUsers
    reposts
  }
  following {
    followingId
    following {
      id
      firstname
      surname
      username
    }
  }
  athleteProfile {
    id
    uuid
    graduationYear
    hudlLink
    featured
    recruitingContactName
    recruitingPhoneNumber
    recruitingRelationship
    coachContactName
    coachContactPhoneNumber
    coachContactTitle
    createdAt
    updatedAt
    playerCardUrl
    verified
    gpa
    _count {
      transcripts
      skills
      evaluations
      SkillHistory
      socialAccounts
    }
    verifiedBy {
      id
      title
      city
      state
      user {
        id
        firstname
        surname
        username
      }
    }
    socialAccounts {
      id
      uuid
      name
      link
      type
      athleteProfileId
    }
    school {
      id
      name
      logo
      state
      city
      schoolType {
        name
        id
      }
    }
    schoolId
    transcripts {
      name
      url
      id
      uuid
    }
    position {
      name
      shortName
      id
    }
    skills {
      id
      videos
      value
      skillType {
        name
        id
        unit
        options
        numberOfVideos
        secondFieldName
        description
        secondValueOptions
      }
    }
    userId
    country {
      name
      id
      flag
      abbreviation
    }
  }
  coachProfile {
    id
    userId
    title
    city
    state
    verified
    schoolId
    _count {
      verifiedAthletes
    }
    country {
      name
      id
      flag
      abbreviation
    }
    school {
      id
      name
      email
      logo
      description
      secondaryColor
      primaryColor
      description
      city
      state
      latitude
      longitude
      radius
      address
      yearFounded
      division
      conference
      yearlyTuition
      undergradStudents
      schoolType {
        name
        id
      }
    }
    schoolId
  }
  accountType {
    id
    title
    createdAt
    role {
      id
      title
    }
  }
}

query getFollowers(
  $where: FollowsWhereInput
  $orderBy: [FollowsOrderByWithRelationInput!]
  $cursor: FollowsWhereUniqueInput
  $take: Int
  $skip: Int
  $distinct: [FollowsScalarFieldEnum!]
) {
  findManyFollows(
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
    distinct: $distinct
  ) {
    follower {
      id
      firstname
      surname
      username
      email
      avatar
      dob
      username
      address
      _count {
        following
        followedBy
      }
      athleteProfile {
        id
        uuid
        gpa
        createdAt
        hudlLink
        recruitingContactName
        recruitingPhoneNumber
        recruitingRelationship
        playerCardUrl
        verified
        school {
          id
          name
          schoolType {
            name
            id
          }
        }
        schoolId
        transcripts {
          name
          url
          id
          uuid
        }
        position {
          name
          shortName
          id
        }
        skills {
          id
          videos
          value
          skillType {
            name
            id
            unit
            options
            numberOfVideos
            secondFieldName
            description
            secondValueOptions
          }
        }
        userId
        country {
          name
          id
          flag
          abbreviation
        }
      }
      accountType {
        id
        title
        createdAt
        role {
          id
          title
        }
      }
    }
    following {
      id
      firstname
      surname
      email
      avatar
      dob
      username
      address
      _count {
        following
        followedBy
      }
      athleteProfile {
        id
        uuid
        gpa
        createdAt
        hudlLink
        recruitingContactName
        recruitingPhoneNumber
        recruitingRelationship
        playerCardUrl
        school {
          id
          name
          schoolType {
            name
            id
          }
        }
        schoolId
        transcripts {
          name
          url
          id
          uuid
        }
        position {
          name
          shortName
          id
        }
        skills {
          id
          videos
          value
          skillType {
            name
            id
            unit
            options
            numberOfVideos
            secondFieldName
            description
            secondValueOptions
          }
        }
        userId
        country {
          name
          id
          flag
          abbreviation
        }
      }
      accountType {
        id
        title
        createdAt
        role {
          id
          title
        }
      }
    }
  }
}

query getUser($where: UserWhereUniqueInput!, $userId: BigInt) {
  user(where: $where) {
    ...UserCommonParts
    followedBy(where: { followerId: { equals: $userId } }) {
      followerId
      follower {
        id
        firstname
        surname
      }
    }
    fanVerified
    role {
      id
      title
      permissions {
        id
        title
        query
      }
    }
  }
}

query GetUsers(
  $where: UserWhereInput
  $orderBy: [UserOrderByWithRelationInput!]
  $cursor: UserWhereUniqueInput
  $take: Int
  $skip: Int
  $distinct: [UserScalarFieldEnum!]
) {
  users(
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
    distinct: $distinct
  ) {
    ...UserCommonParts
    id
    firstname
    surname
    email
    avatar
    username
    city
    state
    fanVerified
    athleteProfile {
      country {
        name
        id
        flag
        abbreviation
      }
    }
    role {
      id
      title
      users {
        firstname
        surname
        id
      }
      permissions {
        id
        title
        query
      }
      accountTypes {
        id
        title
      }
    }
  }
}

query getBlockedUsers(
  $where: BlocksWhereInput
  $orderBy: [BlocksOrderByWithRelationInput!]
  $cursor: BlocksWhereUniqueInput
  $take: Int
  $skip: Int
  $distinct: [BlocksScalarFieldEnum!]
) {
  findManyBlocks(
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
    distinct: $distinct
  ) {
    blocked {
      id
      firstname
      username
      surname
      avatar
      accountType {
        id
        title
      }
    }
  }
}

query getAggregateUser(
  $where: UserWhereInput
  $orderBy: [UserOrderByWithRelationInput!]
  $cursor: UserWhereUniqueInput
  $take: Int
  $skip: Int
) {
  aggregateUser(
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
  ) {
    _count {
      id
    }
  }
}

mutation createOneUser($data: UserCreateInput!) {
  createOneUser(data: $data) {
    ...UserCommonParts
  }
}

mutation updateUser($data: UserUpdateInput!, $where: UserWhereUniqueInput!) {
  updateOneUser(where: $where, data: $data) {
    id
    firstname
    surname
    email
    avatar
    dob
    username
    address
    city
    state
    fanVerified
    _count {
      following
      followedBy
    }
    athleteProfile {
      id
      uuid
      gpa
      createdAt
      hudlLink
      recruitingContactName
      recruitingPhoneNumber
      recruitingRelationship
      playerCardUrl
      verified
      graduationYear
      school {
        id
        name
        email
        logo
        description
        secondaryColor
        primaryColor
        description
        city
        latitude
        longitude
        radius
        address
        yearFounded
        division
        conference
        yearlyTuition
        undergradStudents
        schoolType {
          name
          id
        }
      }
      schoolId
      transcripts {
        name
        url
        id
        uuid
      }
      position {
        name
        shortName
        id
      }
      skills {
        id
        videos
        value
        skillType {
          name
          id
          unit
          options
          numberOfVideos
          secondFieldName
          description
          secondValueOptions
        }
      }
      userId
      country {
        name
        id
        flag
        abbreviation
      }
    }
    accountType {
      id
      title
      createdAt
      role {
        id
        title
      }
    }
  }
}

mutation followUser($data: FollowsCreateInput!) {
  createOneFollows(data: $data) {
    followerId
    followingId
  }
}

mutation blockUser($data: BlocksCreateInput!) {
  createOneBlocks(data: $data) {
    blockedId
    blockedById
  }
}

mutation unBlockUser($where: BlocksWhereUniqueInput!) {
  deleteOneBlocks(where: $where) {
    blockedId
    blockedById
  }
}

mutation unFollowUser($where: FollowsWhereUniqueInput!) {
  deleteOneFollows(where: $where) {
    followerId
    followingId
  }
}

mutation deleteUser($where: UserWhereUniqueInput!) {
  deleteOneUser(where: $where) {
    id
  }
}

mutation DeleteFirebaseUser($data: CreateUserInput!) {
  findAndDeleteExistingUsers(data: $data) {
    success
  }
}

mutation createUser($data: CreateUserInput!) {
  createUser(data: $data) {
    tempPassword
    user
  }
}
